/* are.js v0.0.1 (https://github.com/imaginate/are)
 * Copyright (c) 2015 Adam A Smith <adam@imaginate.life>
 * The Apache License (github.com/imaginate/are/blob/master/LICENSE.md) */
(function(b,f){function g(a,b){return"object"===a||!b&&"function"===a}function n(a,b){return(a=a&&b&&a.nodeType?!1:a)&&!b&&a.Object!==Object?!1:!!a}function a(a){a.is=p.is;a.Is=p.Is;a.are=p.are;a.Are=p.Are;return!0}var p=f(),u=g(typeof exports)&&n(exports,!0),m=g(typeof module)&&n(module,!0),r=g(typeof global,!0)&&n(global),c=g(typeof window)&&n(window),D=g(typeof self)&&n(self),E=g(typeof b)&&n(b);b=u&&m&&r?global:c&&window!==(b&&b.window)?window:D?self:E?b:Function("return this")();c&&a(window);
D&&a(self);a(b);u&&m&&(module.exports===exports?module.exports=p:a(exports));"function"===typeof define&&define.amd&&"object"===typeof define.amd&&define(function(){return p})})(this,function(b){function f(b,r){var c,f;r=1<r.length?n.call(r,0):r[0];if(!a.array(r))throw Error("An are."+b+"(vals) call did not receive multiple vals to evaluate");c=a[b];for(f=r.length;f--;)if(!c(r[f]))return!1;return!0}var g=Object.prototype.toString,n=Array.prototype.slice,a=function(){function a(e,b){var m,d;if(!c.arr(e))return!1;
b=b.slice(0,-1);if(!w.hasOwnProperty("_"+b))throw Error("Failed is() Call: the private helper, checkArrayVals, encountered a missing type value property in the checks hash map; missing prop => "+b);d=w["_"+b];for(m=e.length;m--;)if(!d(e[m]))return!1;return!0}function b(a,m){var h,d;if(!c.obj(a))return!1;m=m.slice(0,-3);if(!w.hasOwnProperty("_"+m))throw Error("Failed is() Call: the private helper, checkMapVals, encountered a missing type value property in the checks hash map; missing prop => "+m);
d=w["_"+m];for(h in a)if(a.hasOwnProperty(h)&&!d(a[h]))return!1;return!0}var c={"null":function(a){return null===a},undefined:function(a){return"undefined"===typeof a},bool:function(a){return"boolean"===typeof a},str:function(a){return"string"===typeof a},num:function(a){return"number"===typeof a},obj:function(a){return!!a&&"object"===typeof a},func:function(a){return!!a&&"function"===typeof a},arr:function(a){return c.obj(a)&&"[object Array]"===g.call(a)},regex:function(a){return c.obj(a)&&"[object RegExp]"===
g.call(a)},doc:function(a){return c.obj(a)&&9===obj.nodeType},elem:function(a){return c.obj(a)&&1===obj.nodeType}},f=/^(?:any|null|undefined)$|^empty(?:array|map)?$|^(?:string|number|boolean|object|function|regexp|array|element|document|str|num|bool|obj|func|regex|arr|elem|doc)(?:s|map)?$/,n=/^(?:string|number|boolean|function)$/,p=/^(?:string|number|boolean|undefined|object|function|regexp|array|element|document)s$/,y=/^(?:string|number|boolean|undefined|object|function|regexp|array|element|document)map$/,
x=/\!/,z=/\?/,u=/\=|undefined|^(?:.+\|)?empty(?:\|.+)?$/,B=/\*|any/,A=/[^a-z\|]/g,t={str:"string",num:"number",bool:"boolean",obj:"object",func:"function",regex:"regexp",arr:"array",elem:"element",doc:"document",strs:"strings",nums:"numbers",bools:"booleans",objs:"objects",funcs:"functions",regexs:"regexps",arrs:"arrays",elems:"elements",docs:"documents",strmap:"stringmap",nummap:"numbermap",boolmap:"booleanmap",objmap:"objectmap",funcmap:"functionmap",regexmap:"regexpmap",arrmap:"arraymap",elemmap:"elementmap",
docmap:"documentmap",emptyarray:"undefineds",emptymap:"undefinedmap"},w={_string:c.str,_number:c.num,_boolean:c.bool,_object:c.obj,_function:c.func,_undefined:c.undefined,_regexp:c.regex,_array:c.arr,_document:c.doc,_element:c.elem,_null:function(){return!1}};return function(e,l){var h;if(!c.str(e))throw new TypeError("An is(type, val) call received a non-string type param");h=e.toLowerCase().replace(A,"").split("|");var d;for(d=h.length;d--;)if(!f.test(h[d]))throw Error("An is(type, val) call received an invalid data type within the type param; invalid type => "+
h[d]);if(B.test(e))return 1<e.length&&console.log("Confusing is() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;if(c.undefined(l)&&u.test(e))return!0;if(d=c["null"](l))d=z.test(e)?!x.test(e):x.test(e);if(d)return!x.test(e)&&z.test(e);if(c["null"](l))a:{for(d=h.length;d--;)if(!n.test(h[d])){h=!0;break a}h=!1}else a:{var k,g;for(d=h.length;d--;){k=h[d];k=t.hasOwnProperty(k)?t[k]:k;g=p.test(k)?a:null;g=!g&&y.test(k)?b:g;if(!g&&
!w.hasOwnProperty("_"+k))throw Error("Failed is() Call: the private helper, forEachCheckType, encountered a missing type value property in the checks hash map; missing prop => "+k);if(g?g(l,k):w["_"+k](l)){h=!0;break a}}h=!1}return h}}();a["null"]=function(a){return null===a};a.undefined=function(a){return"undefined"===typeof a};a["boolean"]=function(a){return"boolean"===typeof a};a.bool=a["boolean"];a.string=function(a,b){return(!1!==b||!!a)&&"string"===typeof a};a.str=a.string;a._string=function(b){return a.string(b,
!1)};a._str=a._string;a.number=function(a,b){return(!1!==b||!!a)&&"number"===typeof a};a.num=a.number;a._number=function(b){return a.number(b,!1)};a._num=a._number;a.object=function(a){return!!a&&"object"===typeof a};a.obj=a.object;a.func=function(a){return!!a&&"function"===typeof a};try{a["function"]=a.func}catch(p){console.log("Your JS engine does not support is.function(). Use is.func() instead.")}a.array=function(b){return a.obj(b)&&"[object Array]"===g.call(b)};a.arr=a.array;a.regexp=function(b){return a.obj(b)&&
"[object RegExp]"===g.call(b)};a.regex=a.regexp;a.document=function(b){return a.obj(b)&&9===b.nodeType};a.doc=a.document;a.element=function(b){return a.obj(b)&&1===b.nodeType};a.elem=a.element;b=function(){function a(b,e){var f,h;if(!c.arr(b))return!1;e=e.slice(0,-1);if(!t.hasOwnProperty("_"+e))throw Error("Failed is() Call: the private helper, checkArrayVals, encountered a missing type value property in the checks hash map; missing prop => "+e);h=t["_"+e];for(f=b.length;f--;)if(h(b[f]))return!1;
return!0}function b(a,e){var f,h;if(!c.obj(a))return!1;e=e.slice(0,-3);if(!t.hasOwnProperty("_"+e))throw Error("Failed is() Call: the private helper, checkMapVals, encountered a missing type value property in the checks hash map; missing prop => "+e);h=t["_"+e];for(f in a)if(a.hasOwnProperty(f)&&!h(a[f]))return!1;return!0}var c={"null":function(a){return null===a},undefined:function(a){return"undefined"===typeof a},bool:function(a){return"boolean"===typeof a},str:function(a){return"string"===typeof a},
num:function(a){return"number"===typeof a},obj:function(a){return!!a&&"object"===typeof a},func:function(a){return!!a&&"function"===typeof a},arr:function(a){return c.obj(a)&&"[object Array]"===g.call(a)},regex:function(a){return c.obj(a)&&"[object RegExp]"===g.call(a)},doc:function(a){return c.obj(a)&&9===obj.nodeType},elem:function(a){return c.obj(a)&&1===obj.nodeType}},f=/^(?:any|null|undefined)$|^empty(?:array|map)?$|^(?:string|number|boolean|object|function|regexp|array|element|document|str|num|bool|obj|func|regex|arr|elem|doc)(?:s|map)?$/,
p=/^(?:string|number|boolean|undefined|object|function|regexp|array|element|document)s$/,u=/^(?:string|number|boolean|undefined|object|function|regexp|array|element|document)map$/,y=/\!/,x=/\?/,z=/\=|undefined|^(?:.+\|)?empty(?:\|.+)?$/,F=/\*|any/,B=/[^a-z\|]/g,A={str:"string",num:"number",bool:"boolean",obj:"object",func:"function",regex:"regexp",arr:"array",elem:"element",doc:"document",strs:"strings",nums:"numbers",bools:"booleans",objs:"objects",funcs:"functions",regexs:"regexps",arrs:"arrays",
elems:"elements",docs:"documents",strmap:"stringmap",nummap:"numbermap",boolmap:"booleanmap",objmap:"objectmap",funcmap:"functionmap",regexmap:"regexpmap",arrmap:"arraymap",elemmap:"elementmap",docmap:"documentmap",emptyarray:"undefineds",emptymap:"undefinedmap"},t={_string:c.str,_number:c.num,_boolean:c.bool,_object:c.obj,_function:c.func,_undefined:c.undefined,_regexp:c.regex,_array:c.arr,_document:c.doc,_element:c.elem,_null:c["null"]};return function(g){var e,l,h;if(!c.str(g))throw new TypeError("An are(type, vals) call received a non-string type param");
e=g.toLowerCase().replace(B,"").split("|");l=e;var d;for(d=l.length;d--;)if(!f.test(l[d]))throw Error("An are(type, vals) call received an invalid data type within the type param; invalid type => "+l[d]);l=2<arguments.length?n.call(arguments,1):arguments[1];if(!c.arr(l))throw new TypeError("An are(type, vals) call did not receive multiple vals to evaluate");if(F.test(g))return 1<g.length&&console.log("Confusing are() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),
!0;z.test(g)&&e.push("undefined");d=g;if(d=x.test(d)?!y.test(d):y.test(d))d=g,d=!y.test(d)&&x.test(d);for(d&&e.push("null");h--;){a:{d=l[h];for(var k=e,C=void 0,q=void 0,v=void 0,C=k.length;C--;){q=k[C];q=A.hasOwnProperty(q)?A[q]:q;v=p.test(q)?a:null;v=!v&&u.test(q)?b:v;if(!v&&!t.hasOwnProperty("_"+q))throw Error("Failed are() Call: the private helper, forEachCheckType, encountered a missing type value property in the checks hash map; missing prop => "+q);if(v?v(d,q):t["_"+q](d)){d=!0;break a}}d=
!1}if(!d)return!1}return!0}}();b["null"]=function(){return f("null",arguments)};b.undefined=function(){return f("undefined",arguments)};b["boolean"]=function(){return f("boolean",arguments)};b.bool=b["boolean"];b.string=function(){return f("string",arguments)};b.str=b.string;b._string=function(){return f("_string",arguments)};b._str=b._string;b.number=function(){return f("number",arguments)};b.num=b.number;b._number=function(){return f("_number",arguments)};b._num=b._number;b.object=function(){return f("object",
arguments)};b.obj=b.object;b.func=function(){return f("func",arguments)};try{b["function"]=b.func}catch(u){console.log("Your JS engine does not support are.function(). Use are.func() instead.")}b.array=function(){return f("array",arguments)};b.arr=b.array;b.regexp=function(){return f("regexp",arguments)};b.regex=b.regexp;b.document=function(){return f("document",arguments)};b.doc=b.document;b.element=function(){return f("element",arguments)};b.elem=b.element;return{is:a,Is:a,are:b,Are:b}});
