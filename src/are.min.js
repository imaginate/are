/* are.js v0.0.1 (https://github.com/imaginate/are)
 * Copyright (c) 2015 Adam A Smith <adam@imaginate.life>
 * The Apache License (github.com/imaginate/are/blob/master/LICENSE.md) */
(function(m,e){function k(b,a){return"object"===b||!a&&"function"===b}function l(b,a){return(b=b&&a&&b.nodeType?!1:b)&&!a&&b.Object!==Object?!1:!!b}function p(b){b.is=n.is;b.Is=n.Is;b.are=n.are;b.Are=n.Are;return!0}var n=e(),u=k(typeof exports)&&l(exports,!0),b=k(typeof module)&&l(module,!0),a=k(typeof global,!0)&&l(global),r=k(typeof window)&&l(window),t=k(typeof self)&&l(self),v=k(typeof m)&&l(m);m=u&&b&&a?global:r&&window!==(m&&m.window)?window:t?self:v?m:Function("return this")();r&&p(window);
t&&p(self);p(m);u&&b&&(module.exports===exports?module.exports=n:p(exports));"function"===typeof define&&define.amd&&"object"===typeof define.amd&&define(function(){return n})})(this,function(m){function e(c,a){var f,d;a=1<a.length?v.call(a,0):a[0];if(!b.array(a))throw Error("An are."+c+"(vals) call did not receive multiple vals to evaluate");f=b[c];for(d=a.length;d--;)if(!f(a[d]))return!1;return!0}function k(c){return g.quesMark(c)?!g.exPoint(c):g.exPoint(c)}function l(c){return!g.exPoint(c)&&g.quesMark(c)}
function p(c,b){var a,d,e;for(a=b.length;a--;){d=b[a];d=w.hasOwnProperty(d)?w[d]:d;e=g.arrays(d)&&n;e=!e&&g.maps(d)&&u;if(!e&&!q.hasOwnProperty("_"+d))throw Error("Failed is/are Helper, _checkEachType(), Call: missing type check in _mainChecks hash map; missing type => "+d);if(e?e(c,d):q["_"+d](c))return!0}return!1}function n(c,a){var f,d;if(!b.arr(c))return!1;a=a.slice(0,-1);if(!q.hasOwnProperty("_"+a))throw Error("Failed is/are Helper, _checkArrayVals(), Call: missing type check in _mainChecks hash map; missing type => "+
a);d=q["_"+a];for(f=c.length;f--;)if(!d(c[f]))return!1;return!0}function u(c,a){var f,d;if(!b.obj(c))return!1;a=a.slice(0,-3);if(!q.hasOwnProperty("_"+a))throw Error("Failed is/are Helper, _checkMapVals(), Call: missing type check in _mainChecks hash map; missing type => "+a);d=q["_"+a];for(f in c)if(c.hasOwnProperty(f)&&!d(c[f]))return!1;return!0}function b(c,a){var f,d;if(!b._str(c))throw new TypeError("An is(type, val) call received a non-string type param");f=c.toLowerCase().replace(h.charBloat,
"").split("|");for(d=f.length;d--;)if(!g.allTypes(f[d]))throw Error("An is(type, val) call received an invalid data type within the type param; invalid type => "+f[d]);if(g.any(c))return 1<c.length&&r&&console.log("Confusing is() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;if(b.undefined(a)&&g.undefined(c))return!0;if(b["null"](a)&&k(c))return l(c);if(b["null"](a))a:{for(d=f.length;d--;)if(!g.nonNull(f[d])){f=!0;break a}f=
!1}else f=p(a,f);return f}function a(c){var a,f,d;if(!b._str(c))throw new TypeError("An are(type, vals) call received a non-string type param");a=c.toLowerCase().replace(h.charBloat,"").split("|");for(d=a.length;d--;)if(!g.allTypes(a[d]))throw Error("An are(type, vals) call received an invalid data type within the type param; invalid type => "+a[d]);f=2<arguments.length?v.call(arguments,1):arguments[1];if(!b.arr(f))throw new TypeError("An are(type, vals) call did not receive multiple vals to evaluate");
if(g.any(c))return 1<c.length&&r&&console.log("Confusing are() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;g.undefined(c)&&a.push("undefined");for(k(c)&&l(c)&&a.push("null");d--;)if(!p(f[d],a))return!1;return!0}var r="object"===typeof console&&"function"===typeof console.log,t=Object.prototype.toString,v=Array.prototype.slice;b["null"]=function(c){return null===c};b.nil=b["null"];b.undefined=function(c){return"undefined"===
typeof c};b["boolean"]=function(c){return"boolean"===typeof c};b.bool=b["boolean"];b.string=function(c,b){return(!1!==b||!!c)&&"string"===typeof c};b.str=b.string;b._string=function(c){return b.string(c,!1)};b._str=b._string;b.number=function(b,a){return(!1!==a||!!b)&&"number"===typeof b};b.num=b.number;b._number=function(c){return b.number(c,!1)};b._num=b._number;b.object=function(b,a){return!!b&&("object"===typeof b||!0===a&&"function"===typeof b)};b.obj=b.object;b._object=function(a){return b.object(a,
!0)};b._obj=b._object;b.func=function(b){return!!b&&"function"===typeof b};b.fn=b.func;try{b["function"]=b.func}catch(x){console.log("Your JS engine does not support is.function(). Use is.func() instead.")}b.array=function(a){return b.obj(a)&&"[object Array]"===t.call(a)};b.arr=b.array;b.regexp=function(a){return b.obj(a)&&"[object RegExp]"===t.call(a)};b.regex=b.regexp;b.document=function(a){return b.obj(a)&&9===a.nodeType};b.doc=b.document;b.element=function(a){return b.obj(a)&&1===a.nodeType};
b.elem=b.element;b.empty=function(a){var e;if(!b._obj(a))return!a;if(b.arr(a)||b.func(a))return!a.length;for(e in a)if(a.hasOwnProperty(e))return!1;return!0};a["null"]=function(){return e("null",arguments)};a.nil=a["null"];a.undefined=function(){return e("undefined",arguments)};a["boolean"]=function(){return e("boolean",arguments)};a.bool=a["boolean"];a.string=function(){return e("string",arguments)};a.str=a.string;a._string=function(){return e("_string",arguments)};a._str=a._string;a.number=function(){return e("number",
arguments)};a.num=a.number;a._number=function(){return e("_number",arguments)};a._num=a._number;a.object=function(){return e("object",arguments)};a.obj=a.object;a._object=function(){return e("_object",arguments)};a._obj=a._object;a.func=function(){return e("func",arguments)};a.fn=a.func;try{a["function"]=a.func}catch(y){console.log("Your JS engine does not support are.function(). Use are.func() instead.")}a.array=function(){return e("array",arguments)};a.arr=a.array;a.regexp=function(){return e("regexp",
arguments)};a.regex=a.regexp;a.document=function(){return e("document",arguments)};a.doc=a.document;a.element=function(){return e("element",arguments)};a.elem=a.element;a.empty=function(){return e("empty",arguments)};var h={allTypes:/^(?:any|undefined|empty)$|^(?:null|string|number|boolean|object|regexp|function|array|element|document|nil|str|num|bool|obj|func|fn|regex|arr|elem|doc)(?:s|map)?$/,nonNull:/^(?:string|number|boolean|function|undefined|str|num|bool|func|fn)$/,arrays:/^(?:null|string|number|boolean|undefined|object|function|regexp|array|element|document)s$/,
maps:/^(?:null|string|number|boolean|undefined|object|function|regexp|array|element|document)map$/,exPoint:/\!/,quesMark:/\?/,undefined:/\=|undefined/,any:/\*|any/,charBloat:/[^a-z\|]/g},g={allTypes:function(a){return h.allTypes.test(a)},nonNull:function(a){return h.nonNull.test(a)},arrays:function(a){return h.arrays.test(a)},maps:function(a){return h.maps.test(a)},exPoint:function(a){return h.exPoint.test(a)},quesMark:function(a){return h.quesMark.test(a)},undefined:function(a){return h.undefined.test(a)},
any:function(a){return h.any.test(a)},charBloat:function(a){return h.charBloat.test(a)}},w={nil:"null",str:"string",num:"number",bool:"boolean",obj:"object",fn:"function",func:"function",regex:"regexp",arr:"array",elem:"element",doc:"document",nils:"nulls",strs:"strings",nums:"numbers",bools:"booleans",objs:"objects",fns:"functions",funcs:"functions",regexs:"regexps",arrs:"arrays",elems:"elements",docs:"documents",nilmap:"nullmap",strmap:"stringmap",nummap:"numbermap",boolmap:"booleanmap",objmap:"objectmap",
fnmap:"functionmap",funcmap:"functionmap",regexmap:"regexpmap",arrmap:"arraymap",elemmap:"elementmap",docmap:"documentmap"},q={_null:b.nil,_string:b._str,_number:b._num,_boolean:b.bool,_object:b.obj,_function:b.func,_undefined:b.undefined,_regexp:b.regex,_array:b.arr,_document:b.doc,_element:b.elem,_empty:b.empty};return{is:b,Is:b,are:a,Are:a}});
