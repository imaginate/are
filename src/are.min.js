/* are.js v0.0.1 (https://github.com/imaginate/are)
 * Copyright (c) 2015 Adam A Smith <adam@imaginate.life>
 * The Apache License (github.com/imaginate/are/blob/master/LICENSE.md) */
(function(m,f){function k(a,b){return"object"===a||!b&&"function"===a}function l(a,b){return(a=a&&b&&a.nodeType?!1:a)&&!b&&a.Object!==Object?!1:!!a}function p(a){a.is=n.is;a.Is=n.Is;a.are=n.are;a.Are=n.Are;return!0}var n=f(),u=k(typeof exports)&&l(exports,!0),a=k(typeof module)&&l(module,!0),b=k(typeof global,!0)&&l(global),r=k(typeof window)&&l(window),t=k(typeof self)&&l(self),v=k(typeof m)&&l(m);m=u&&a&&b?global:r&&window!==(m&&m.window)?window:t?self:v?m:Function("return this")();r&&p(window);
t&&p(self);p(m);u&&a&&(module.exports===exports?module.exports=n:p(exports));"function"===typeof define&&define.amd&&"object"===typeof define.amd&&define(function(){return n})})(this,function(m){function f(c,b){var d,e;b=1<b.length?v.call(b,0):b[0];if(!a.array(b))throw Error("An are."+c+"(vals) call did not receive multiple vals to evaluate");d=a[c];for(e=b.length;e--;)if(!d(b[e]))return!1;return!0}function k(c){return g.quesMark(c)?!g.exPoint(c):g.exPoint(c)}function l(c){return!g.exPoint(c)&&g.quesMark(c)}
function p(c,a){var b,e,f;for(b=a.length;b--;){e=a[b];e=w.hasOwnProperty(e)?w[e]:e;f=(f=g.arrays(e)&&n)||g.maps(e)&&u;if(!f&&!q.hasOwnProperty("_"+e))throw Error("Failed is/are Helper, _checkEachType(), Call: missing type check in _mainChecks hash map; missing type => "+e);if(f?f(c,e):q["_"+e](c))return!0}return!1}function n(c,b){var d,e;if(!a.arr(c))return!1;b=b.slice(0,-1);if(!q.hasOwnProperty("_"+b))throw Error("Failed is/are Helper, _checkArrayVals(), Call: missing type check in _mainChecks hash map; missing type => "+
b);e=q["_"+b];for(d=c.length;d--;)if(!e(c[d]))return!1;return!0}function u(c,b){var d,e;if(!a.obj(c))return!1;b=b.slice(0,-3);if(!q.hasOwnProperty("_"+b))throw Error("Failed is/are Helper, _checkMapVals(), Call: missing type check in _mainChecks hash map; missing type => "+b);e=q["_"+b];for(d in c)if(c.hasOwnProperty(d)&&!e(c[d]))return!1;return!0}function a(c,b){var d,e;if(!a._str(c))throw new TypeError("An is(type, val) call received a non-string type param");if(g.any(c))return"*"!==c&&"any"!==
c&&r&&console.log("Confusing is() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;d=c.toLowerCase().replace(h.charBloat,"").split("|");for(e=d.length;e--;)if(!g.allTypes(d[e]))throw Error("An is(type, val) call received an invalid data type within the type param; invalid type => "+d[e]);if(a.undefined(b)&&g.undefined(c))return!0;if(a["null"](b)&&k(c))return l(c);if(a["null"](b))a:{for(e=d.length;e--;)if(!g.nonNull(d[e])){d=!0;
break a}d=!1}else d=p(b,d);return d}function b(c){var b,d;if(!a._str(c))throw new TypeError("An are(type, vals) call received a non-string type param");vals=2<arguments.length?v.call(arguments,1):2===arguments.length?arguments[1]:null;if(!a.arr(vals))throw new TypeError("An are(type, vals) call did not receive multiple vals to evaluate");if(g.any(c))return"*"!==c&&"any"!==c&&r&&console.log("Confusing are() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),
!0;b=c.toLowerCase().replace(h.charBloat,"").split("|");for(d=b.length;d--;)if(!g.allTypes(b[d]))throw Error("An are(type, vals) call received an invalid data type within the type param; invalid type => "+b[d]);g.undefined(c)&&b.push("undefined");for(k(c)&&l(c)&&b.push("null");d--;)if(!p(vals[d],b))return!1;return!0}var r="object"===typeof console&&"function"===typeof console.log,t=Object.prototype.toString,v=Array.prototype.slice;a["null"]=function(c){return null===c};a.nil=a["null"];a.undefined=
function(c){return"undefined"===typeof c};a["boolean"]=function(c){return"boolean"===typeof c};a.bool=a["boolean"];a.string=function(c,a){return(!1!==a||!!c)&&"string"===typeof c};a.str=a.string;a._string=function(c){return a.string(c,!1)};a._str=a._string;a.number=function(c,a){return(!1!==a||!!c)&&"number"===typeof c};a.num=a.number;a._number=function(c){return a.number(c,!1)};a._num=a._number;a.object=function(a,b){return!!a&&("object"===typeof a||!0===b&&"function"===typeof a)};a.obj=a.object;
a._object=function(c){return a.object(c,!0)};a._obj=a._object;a.func=function(a){return!!a&&"function"===typeof a};a.fn=a.func;try{a["function"]=a.func}catch(x){console.log("Your JS engine does not support is.function(). Use is.func() instead.")}a.array=function(c){return a.obj(c)&&"[object Array]"===t.call(c)};a.arr=a.array;a.regexp=function(c){return a.obj(c)&&"[object RegExp]"===t.call(c)};a.regex=a.regexp;a.document=function(c){return a.obj(c)&&9===c.nodeType};a.doc=a.document;a.element=function(c){return a.obj(c)&&
1===c.nodeType};a.elem=a.element;a.empty=function(c){var b;if(!a._obj(c))return!c;if(a.arr(c)||a.func(c))return!c.length;for(b in c)if(c.hasOwnProperty(b))return!1;return!0};b["null"]=function(){return f("null",arguments)};b.nil=b["null"];b.undefined=function(){return f("undefined",arguments)};b["boolean"]=function(){return f("boolean",arguments)};b.bool=b["boolean"];b.string=function(){return f("string",arguments)};b.str=b.string;b._string=function(){return f("_string",arguments)};b._str=b._string;
b.number=function(){return f("number",arguments)};b.num=b.number;b._number=function(){return f("_number",arguments)};b._num=b._number;b.object=function(){return f("object",arguments)};b.obj=b.object;b._object=function(){return f("_object",arguments)};b._obj=b._object;b.func=function(){return f("func",arguments)};b.fn=b.func;try{b["function"]=b.func}catch(y){console.log("Your JS engine does not support are.function(). Use are.func() instead.")}b.array=function(){return f("array",arguments)};b.arr=
b.array;b.regexp=function(){return f("regexp",arguments)};b.regex=b.regexp;b.document=function(){return f("document",arguments)};b.doc=b.document;b.element=function(){return f("element",arguments)};b.elem=b.element;b.empty=function(){return f("empty",arguments)};var h={allTypes:/^(?:any|undefined|empty)$|^(?:null|string|number|boolean|object|regexp|function|array|element|document|nil|str|num|bool|obj|func|fn|regex|arr|elem|doc)(?:s|map)?$/,nonNull:/^(?:string|number|boolean|function|undefined|str|num|bool|func|fn)$/,
arrays:/^(?:null|string|number|boolean|undefined|object|function|regexp|array|element|document)s$/,maps:/^(?:null|string|number|boolean|undefined|object|function|regexp|array|element|document)map$/,exPoint:/\!/,quesMark:/\?/,undefined:/\=|undefined/,any:/\*|any/,charBloat:/[^a-z\|]/g},g={allTypes:function(a){return h.allTypes.test(a)},nonNull:function(a){return h.nonNull.test(a)},arrays:function(a){return h.arrays.test(a)},maps:function(a){return h.maps.test(a)},exPoint:function(a){return h.exPoint.test(a)},
quesMark:function(a){return h.quesMark.test(a)},undefined:function(a){return h.undefined.test(a)},any:function(a){return h.any.test(a)},charBloat:function(a){return h.charBloat.test(a)}},w={nil:"null",str:"string",num:"number",bool:"boolean",obj:"object",fn:"function",func:"function",regex:"regexp",arr:"array",elem:"element",doc:"document",nils:"nulls",strs:"strings",nums:"numbers",bools:"booleans",objs:"objects",fns:"functions",funcs:"functions",regexs:"regexps",arrs:"arrays",elems:"elements",docs:"documents",
nilmap:"nullmap",strmap:"stringmap",nummap:"numbermap",boolmap:"booleanmap",objmap:"objectmap",fnmap:"functionmap",funcmap:"functionmap",regexmap:"regexpmap",arrmap:"arraymap",elemmap:"elementmap",docmap:"documentmap"},q={_null:a.nil,_string:a.str,_number:a.num,_boolean:a.bool,_object:a.obj,_function:a.func,_undefined:a.undefined,_regexp:a.regex,_array:a.arr,_document:a.doc,_element:a.elem,_empty:a.empty};return{is:a,Is:a,are:b,Are:b}});
