/* are.js v0.0.1 (https://github.com/imaginate/are)
 * Copyright (c) 2015 Adam A Smith <adam@imaginate.life>
 * The Apache License (github.com/imaginate/are/blob/master/LICENSE.md) */
(function(h,d){function g(a,b){return"object"===a||!b&&"function"===a}function f(a,b){return(a=a&&b&&a.nodeType?!1:a)&&!b&&a.Object!==Object?!1:!!a}function n(a){a.is=k.is;a.Is=k.Is;a.are=k.are;a.Are=k.Are;return!0}var k=d(),r=g(typeof exports)&&f(exports,!0),a=g(typeof module)&&f(module,!0),b=g(typeof global,!0)&&f(global),t=g(typeof window)&&f(window),p=g(typeof self)&&f(self),u=g(typeof h)&&f(h);h=r&&a&&b?global:t&&window!==(h&&h.window)?window:p?self:u?h:Function("return this")();t&&n(window);
p&&n(self);n(h);r&&a&&(module.exports===exports?module.exports=k:n(exports));"function"===typeof define&&define.amd&&"object"===typeof define.amd&&define(function(){return k})})(this,function(h){function d(m,b){var c,e;b=1<b.length?u.call(b,0):b[0];if(!a.arr(b))throw Error("An are."+m+"(vals) call did not receive multiple vals to evaluate");c=a[m];for(e=b.length;e--;)if(!c(b[e]))return!1;return!0}function g(a,b,c){for(var e in b)b.hasOwnProperty(e)&&f(a,e,b[e],c)}function f(m,b,c,e){c=f.hasOwnProperty(m)?
f[m](c):c;e=!1!==e;v["_"+b]=function(m,b){b=a.bool(b)?b:e;return a.nil(m)?b:c(m)}}function n(a,b,c){var e;for(e=a.length;e--;)if(v[a[e]](b,c))return!0;return!1}function k(a){var b,c,e;b=a.toLowerCase().replace(l.all,"").split("|");for(e=b.length;e--;){c="_"+b[e];c=w.hasOwnProperty(c)?"_"+w[c]:c;if(!v.hasOwnProperty(c))return c;b[e]=c}l["="](a)&&b.push("_undefined");return b}function r(a){return(l["?"](a)?l["!"](a):!l["!"](a))?h:!l["!"](a)&&l["?"](a)}function a(b,q){var c,e;if(!a._str(b))throw new TypeError("An is(typeStr, val) call received a non-string typeStr param");
if(l["*"](b))return"*"!==b&&"any"!==b&&t&&console.log("Confusing is() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;c=k(b);if(a.str(c))throw Error("Invalid is(typeStr, val) Call: invalid type in the typeStr param; invalid type => "+c);e=r(b);return n(c,q,e)}function b(b,q){var c,e;if(!a._str(b))throw new TypeError("An are(typeStr, vals) call received a non-string typeStr param");q=2<arguments.length?u.call(arguments,1):q;if(!a.arr(q))throw new TypeError("An are(typeStr, vals) call did not receive multiple vals to evaluate");
if(l["*"](b))return"*"!==b&&"any"!==b&&t&&console.log("Confusing are() Syntax: an asterisk should not be used with other data types as the check will pass regardless of the value's type"),!0;c=k(b);if(a.str(c))throw Error("Invalid are(typeStr, val) Call: invalid type in the typeStr param; invalid type => "+c);e=r(b);a:{var d=q,f;for(f=d.length;f--;)if(!n(c,d[f],e)){c=!1;break a}c=!0}return c}var t="object"===typeof console&&"function"===typeof console.log,p=Object.prototype.toString,u=Array.prototype.slice;
a["null"]=function(a){return null===a};a.nil=a["null"];a.undefined=function(a){return"undefined"===typeof a};a["boolean"]=function(a){return"boolean"===typeof a};a.bool=a["boolean"];a.string=function(a,b){return(!1!==b||!!a)&&"string"===typeof a};a.str=a.string;a._string=function(b){return a.string(b,!1)};a._str=a._string;a.number=function(a,b){return(!1!==b||!!a)&&"number"===typeof a};a.num=a.number;a._number=function(b){return a.number(b,!1)};a._num=a._number;a.object=function(a,b){return!!a&&("object"===
typeof a||!0===b&&"function"===typeof a)};a.obj=a.object;a._object=function(b){return a.object(b,!0)};a._obj=a._object;a.func=function(a){return!!a&&"function"===typeof a};a.fn=a.func;try{a["function"]=a.func}catch(x){console.log("Your JS engine does not support is.function(). Use is.func() instead.")}a.array=function(b){return a.obj(b)&&"[object Array]"===p.call(b)};a.arr=a.array;a.regexp=function(b){return a.obj(b)&&"[object RegExp]"===p.call(b)};a.regex=a.regexp;a.args=function(b){return a.obj(b)&&
("[object Arguments]"===p.call(b)||"callee"in b)};try{a.arguments=a.args}catch(y){console.log("Your JS engine does not support is.arguments(). Use is.args() instead.")}a.document=function(b){return a.obj(b)&&9===b.nodeType};a.doc=a.document;a.element=function(b){return a.obj(b)&&1===b.nodeType};a.elem=a.element;a.empty=function(b){var d;if(!a._obj(b))return!b;if(a.arr(b)||a.func(b))return!b.length;for(d in b)if(b.hasOwnProperty(d))return!1;return!0};b["null"]=function(){return d("null",arguments)};
b.nil=b["null"];b.undefined=function(){return d("undefined",arguments)};b["boolean"]=function(){return d("boolean",arguments)};b.bool=b["boolean"];b.string=function(){return d("string",arguments)};b.str=b.string;b._string=function(){return d("_string",arguments)};b._str=b._string;b.number=function(){return d("number",arguments)};b.num=b.number;b._number=function(){return d("_number",arguments)};b._num=b._number;b.object=function(){return d("object",arguments)};b.obj=b.object;b._object=function(){return d("_object",
arguments)};b._obj=b._object;b.func=function(){return d("func",arguments)};b.fn=b.func;try{b["function"]=b.func}catch(z){console.log("Your JS engine does not support are.function(). Use are.func() instead.")}b.array=function(){return d("array",arguments)};b.arr=b.array;b.regexp=function(){return d("regexp",arguments)};b.regex=b.regexp;b.args=function(){return d("args",arguments)};try{b.arguments=b.args}catch(A){console.log("Your JS engine does not support are.arguments(). Use are.args() instead.")}b.document=
function(){return d("document",arguments)};b.doc=b.document;b.element=function(){return d("element",arguments)};b.elem=b.element;b.empty=function(){return d("empty",arguments)};f.arrays=function(b){return function(d){var c;if(!a.arr(d))return!1;for(c=d.length;c--;)if(!b(d[c]))return!1;return!0}};f.maps=function(b){return function(d){var c;if(!a.obj(d))return!1;for(c in d)if(d.hasOwnProperty(c)&&!b(d[c]))return!1;return!0}};var v={};g("primitives",{undefined:a.undefined,"boolean":a.bool,string:a.str,
number:a.num},!1);f("primitives","null",a.nil);g("js_objects",{object:a.obj,regexp:a.regex,array:a.arr});f("js_objects","function",a.func,!1);g("dom_objects",{element:a.elem,document:a.doc});f("others","empty",a.empty);g("arrays",{nulls:a.nil,booleans:a.bool,strings:a.str,numbers:a.num,objects:a.obj,functions:a.func,regexps:a.regex,arrays:a.arr,elements:a.elem,documents:a.doc});g("maps",{nullmap:a.nil,booleanmap:a.bool,stringmap:a.str,numbermap:a.num,objectmap:a.obj,functionmap:a.func,regexpmap:a.regex,
arraymap:a.arr,elementmap:a.elem,documentmap:a.doc});var w={_nil:"null",_bool:"boolean",_str:"string",_num:"number",_obj:"object",_func:"function",_fn:"function",_regex:"regexp",_arr:"array",_elem:"element",_doc:"document",_nils:"nulls",_strs:"strings",_nums:"numbers",_bools:"booleans",_objs:"objects",_funcs:"functions",_fns:"functions",_regexs:"regexps",_arrs:"arrays",_elems:"elements",_docs:"documents",_nilmap:"nullmap",_strmap:"stringmap",_nummap:"numbermap",_boolmap:"booleanmap",_objmap:"objectmap",
_funcmap:"functionmap",_fnmap:"functionmap",_regexmap:"regexpmap",_arrmap:"arraymap",_elemmap:"elementmap",_docmap:"documentmap"},l=function(a,b,c,d,f){return{"|":function(b){return a.test(b)},"!":function(a){return b.test(a)},"?":function(a){return c.test(a)},"=":function(a){return d.test(a)},"*":function(a){return f.test(a)},all:/[^a-z\|]/g}}(/\|/,/\!/,/\?/,/\=/,/\*|any/);return{is:a,Is:a,are:b,Are:b}});
